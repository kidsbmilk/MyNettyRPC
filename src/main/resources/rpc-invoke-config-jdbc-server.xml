<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:nettyrpc="http://www.mynettyrpc.com/nettyrpc" xmlns:tx="http://www.springframework.org/schema/tx"
       xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.0.xsd
 	http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd
     http://www.mynettyrpc.com/nettyrpc http://www.mynettyrpc.com/nettyrpc/nettyrpc.xsd http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx.xsd">

    <context:property-placeholder location="classpath:rpc-server.properties"/>

    <nettyrpc:service id="demoAddService" interfaceName="my.netty.rpc.services.AddCalculate" ref="calcAddService"></nettyrpc:service>
    <nettyrpc:service id="demoMultiService" interfaceName="my.netty.rpc.services.MultiCalculate" ref="calcMultiService"></nettyrpc:service>
    <nettyrpc:service id="demoPersonManage" interfaceName="my.netty.rpc.services.PersonManage" ref="personManageService"></nettyrpc:service>
    <nettyrpc:service id="demoPersonManageJdbc" interfaceName="my.netty.rpc.services.JdbcPersonManage" ref="personManageServiceJdbc"></nettyrpc:service>
    <nettyrpc:service id="demoCostTime" interfaceName="my.netty.rpc.services.CostTimeCalculate" ref="costTimeCalculateService"></nettyrpc:service>
    <nettyrpc:service id="demoCache" interfaceName="my.netty.rpc.services.Cache" ref="cacheService" filter="simpleFilter"></nettyrpc:service>
    <nettyrpc:service id="demoStore" interfaceName="my.netty.rpc.services.Store" ref="storeService" filter="simpleFilter"></nettyrpc:service>

    <nettyrpc:registry id="rpcRegistry" ipAddr="${rpc.server.addr}" echoApiPort="${rpc.server.echo.api.port}" protocol="PROTOSTUFFSERIALIZE"></nettyrpc:registry>

    <bean id="calcAddService" class="my.netty.rpc.services.impl.AddCalculateImpl"></bean>
    <bean id="calcMultiService" class="my.netty.rpc.services.impl.MultiCalculateImpl"></bean>
    <bean id="personManageService" class="my.netty.rpc.services.impl.PersonManageImpl"></bean>
    <bean id="personManageServiceJdbc" class="my.netty.rpc.services.impl.JdbcPersonManageImpl">
        <property name="dataSource" ref="dataSource"></property>
    </bean>
    <bean id="costTimeCalculateService" class="my.netty.rpc.services.impl.CostTimeCalculateImpl"></bean>
    <bean id="cacheService" class="my.netty.rpc.services.impl.CacheImpl"></bean>
    <bean id="storeService" class="my.netty.rpc.services.impl.StoreImpl"></bean>
    <bean id="simpleFilter" class="my.netty.rpc.filter.support.SimpleFilter"></bean>


    <bean id="dataSource" class="com.alibaba.druid.pool.DruidDataSource" init-method="init" destroy-method="close">
        <property name="driverClassName" value="com.mysql.cj.jdbc.Driver"/>
        <property name="url" value="jdbc:mysql://localhost:3306/mynettytest?characterEncoding=utf-8"/>
        <property name="username" value="root"/>
        <property name="password" value="qwert321"/>

        <!-- 配置监控统计拦截的filters -->
        <property name="filters" value="stat" />

        <!-- 配置初始化大小、最小、最大 -->
        <property name="maxActive" value="20" />
        <property name="initialSize" value="1" />
        <property name="minIdle" value="1" />

        <!-- 配置获取连接等待超时的时间 -->
        <property name="maxWait" value="60000" />

        <!-- 配置间隔多久才进行一次检测，检测需要关闭的空闲连接，单位是毫秒 -->
        <property name="timeBetweenEvictionRunsMillis" value="60000" />

        <!-- 配置一个连接在池中最小生存的时间，单位是毫秒 -->
        <property name="minEvictableIdleTimeMillis" value="300000" />

        <property name="testWhileIdle" value="true" />
        <property name="testOnBorrow" value="false" />
        <property name="testOnReturn" value="false" />

        <!-- 打开PSCache，并且指定每个连接上PSCache的大小 -->
        <property name="poolPreparedStatements" value="true" />
        <property name="maxOpenPreparedStatements" value="20" />
    </bean>

    <bean id="jdbcTemplate" class="org.springframework.jdbc.core.JdbcTemplate">
        <constructor-arg name="dataSource" ref="dataSource"/>
    </bean>

    <bean id="sqlTxManager"
          class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
        <property name="dataSource" ref="dataSource"/>
    </bean>

    <tx:annotation-driven transaction-manager="sqlTxManager"/>
</beans>